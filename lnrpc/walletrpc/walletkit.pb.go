// Code generated by protoc-gen-go. DO NOT EDIT.
// source: walletrpc/walletkit.proto

package walletrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	signrpc "github.com/lightningnetwork/lnd/lnrpc/signrpc"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WitnessType int32

const (
	WitnessType_UNKNOWN_WITNESS WitnessType = 0
	//
	//A witness that allows us to spend the output of a commitment transaction
	//after a relative lock-time lockout.
	WitnessType_COMMITMENT_TIME_LOCK WitnessType = 1
	//
	//A witness that allows us to spend a settled no-delay output immediately on a
	//counterparty's commitment transaction.
	WitnessType_COMMITMENT_NO_DELAY WitnessType = 2
	//
	//A witness that allows us to sweep the settled output of a malicious
	//counterparty's who broadcasts a revoked commitment transaction.
	WitnessType_COMMITMENT_REVOKE WitnessType = 3
	//
	//A witness that allows us to sweep an HTLC which we offered to the remote
	//party in the case that they broadcast a revoked commitment state.
	WitnessType_HTLC_OFFERED_REVOKE WitnessType = 4
	//
	//A witness that allows us to sweep an HTLC output sent to us in the case that
	//the remote party broadcasts a revoked commitment state.
	WitnessType_HTLC_ACCEPTED_REVOKE WitnessType = 5
	//
	//A witness that allows us to sweep an HTLC output that we extended to a
	//party, but was never fulfilled.  This HTLC output isn't directly on the
	//commitment transaction, but is the result of a confirmed second-level HTLC
	//transaction. As a result, we can only spend this after a CSV delay.
	WitnessType_HTLC_OFFERED_TIMEOUT_SECOND_LEVEL WitnessType = 6
	//
	//A witness that allows us to sweep an HTLC output that was offered to us, and
	//for which we have a payment preimage. This HTLC output isn't directly on our
	//commitment transaction, but is the result of confirmed second-level HTLC
	//transaction. As a result, we can only spend this after a CSV delay.
	WitnessType_HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL WitnessType = 7
	//
	//A witness that allows us to sweep an HTLC that we offered to the remote
	//party which lies in the commitment transaction of the remote party. We can
	//spend this output after the absolute CLTV timeout of the HTLC as passed.
	WitnessType_HTLC_OFFERED_REMOTE_TIMEOUT WitnessType = 8
	//
	//A witness that allows us to sweep an HTLC that was offered to us by the
	//remote party. We use this witness in the case that the remote party goes to
	//chain, and we know the pre-image to the HTLC. We can sweep this without any
	//additional timeout.
	WitnessType_HTLC_ACCEPTED_REMOTE_SUCCESS WitnessType = 9
	//
	//A witness that allows us to sweep an HTLC from the remote party's commitment
	//transaction in the case that the broadcast a revoked commitment, but then
	//also immediately attempt to go to the second level to claim the HTLC.
	WitnessType_HTLC_SECOND_LEVEL_REVOKE WitnessType = 10
	//
	//A witness type that allows us to spend a regular p2wkh output that's sent to
	//an output which is under complete control of the backing wallet.
	WitnessType_WITNESS_KEY_HASH WitnessType = 11
	//
	//A witness type that allows us to sweep an output that sends to a nested P2SH
	//script that pays to a key solely under our control.
	WitnessType_NESTED_WITNESS_KEY_HASH WitnessType = 12
	//
	//A witness type that allows us to spend our anchor on the commitment
	//transaction.
	WitnessType_COMMITMENT_ANCHOR WitnessType = 13
)

var WitnessType_name = map[int32]string{
	0:  "UNKNOWN_WITNESS",
	1:  "COMMITMENT_TIME_LOCK",
	2:  "COMMITMENT_NO_DELAY",
	3:  "COMMITMENT_REVOKE",
	4:  "HTLC_OFFERED_REVOKE",
	5:  "HTLC_ACCEPTED_REVOKE",
	6:  "HTLC_OFFERED_TIMEOUT_SECOND_LEVEL",
	7:  "HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL",
	8:  "HTLC_OFFERED_REMOTE_TIMEOUT",
	9:  "HTLC_ACCEPTED_REMOTE_SUCCESS",
	10: "HTLC_SECOND_LEVEL_REVOKE",
	11: "WITNESS_KEY_HASH",
	12: "NESTED_WITNESS_KEY_HASH",
	13: "COMMITMENT_ANCHOR",
}

var WitnessType_value = map[string]int32{
	"UNKNOWN_WITNESS":                    0,
	"COMMITMENT_TIME_LOCK":               1,
	"COMMITMENT_NO_DELAY":                2,
	"COMMITMENT_REVOKE":                  3,
	"HTLC_OFFERED_REVOKE":                4,
	"HTLC_ACCEPTED_REVOKE":               5,
	"HTLC_OFFERED_TIMEOUT_SECOND_LEVEL":  6,
	"HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL": 7,
	"HTLC_OFFERED_REMOTE_TIMEOUT":        8,
	"HTLC_ACCEPTED_REMOTE_SUCCESS":       9,
	"HTLC_SECOND_LEVEL_REVOKE":           10,
	"WITNESS_KEY_HASH":                   11,
	"NESTED_WITNESS_KEY_HASH":            12,
	"COMMITMENT_ANCHOR":                  13,
}

func (x WitnessType) String() string {
	return proto.EnumName(WitnessType_name, int32(x))
}

func (WitnessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{0}
}

type LeaseOutputRequest struct {
	//
	//An ID of 32 random bytes that must be unique for each distinct application
	//using this RPC which will be used to bound the output lease to.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The identifying outpoint of the output being leased.
	Outpoint             *lnrpc.OutPoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LeaseOutputRequest) Reset()         { *m = LeaseOutputRequest{} }
func (m *LeaseOutputRequest) String() string { return proto.CompactTextString(m) }
func (*LeaseOutputRequest) ProtoMessage()    {}
func (*LeaseOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{0}
}

func (m *LeaseOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseOutputRequest.Unmarshal(m, b)
}
func (m *LeaseOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseOutputRequest.Marshal(b, m, deterministic)
}
func (m *LeaseOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseOutputRequest.Merge(m, src)
}
func (m *LeaseOutputRequest) XXX_Size() int {
	return xxx_messageInfo_LeaseOutputRequest.Size(m)
}
func (m *LeaseOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseOutputRequest proto.InternalMessageInfo

func (m *LeaseOutputRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LeaseOutputRequest) GetOutpoint() *lnrpc.OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

type LeaseOutputResponse struct {
	//
	//The absolute expiration of the output lease represented as a unix timestamp.
	Expiration           uint64   `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseOutputResponse) Reset()         { *m = LeaseOutputResponse{} }
func (m *LeaseOutputResponse) String() string { return proto.CompactTextString(m) }
func (*LeaseOutputResponse) ProtoMessage()    {}
func (*LeaseOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{1}
}

func (m *LeaseOutputResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseOutputResponse.Unmarshal(m, b)
}
func (m *LeaseOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseOutputResponse.Marshal(b, m, deterministic)
}
func (m *LeaseOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseOutputResponse.Merge(m, src)
}
func (m *LeaseOutputResponse) XXX_Size() int {
	return xxx_messageInfo_LeaseOutputResponse.Size(m)
}
func (m *LeaseOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseOutputResponse proto.InternalMessageInfo

func (m *LeaseOutputResponse) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type ReleaseOutputRequest struct {
	// The unique ID that was used to lock the output.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The identifying outpoint of the output being released.
	Outpoint             *lnrpc.OutPoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReleaseOutputRequest) Reset()         { *m = ReleaseOutputRequest{} }
func (m *ReleaseOutputRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseOutputRequest) ProtoMessage()    {}
func (*ReleaseOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{2}
}

func (m *ReleaseOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseOutputRequest.Unmarshal(m, b)
}
func (m *ReleaseOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseOutputRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseOutputRequest.Merge(m, src)
}
func (m *ReleaseOutputRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseOutputRequest.Size(m)
}
func (m *ReleaseOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseOutputRequest proto.InternalMessageInfo

func (m *ReleaseOutputRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReleaseOutputRequest) GetOutpoint() *lnrpc.OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

type ReleaseOutputResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseOutputResponse) Reset()         { *m = ReleaseOutputResponse{} }
func (m *ReleaseOutputResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseOutputResponse) ProtoMessage()    {}
func (*ReleaseOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{3}
}

func (m *ReleaseOutputResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseOutputResponse.Unmarshal(m, b)
}
func (m *ReleaseOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseOutputResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseOutputResponse.Merge(m, src)
}
func (m *ReleaseOutputResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseOutputResponse.Size(m)
}
func (m *ReleaseOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseOutputResponse proto.InternalMessageInfo

type KeyReq struct {
	//
	//Is the key finger print of the root pubkey that this request is targeting.
	//This allows the WalletKit to possibly serve out keys for multiple HD chains
	//via public derivation.
	KeyFingerPrint int32 `protobuf:"varint,1,opt,name=key_finger_print,json=keyFingerPrint,proto3" json:"key_finger_print,omitempty"`
	//
	//The target key family to derive a key from. In other contexts, this is
	//known as the "account".
	KeyFamily            int32    `protobuf:"varint,2,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyReq) Reset()         { *m = KeyReq{} }
func (m *KeyReq) String() string { return proto.CompactTextString(m) }
func (*KeyReq) ProtoMessage()    {}
func (*KeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{4}
}

func (m *KeyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyReq.Unmarshal(m, b)
}
func (m *KeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyReq.Marshal(b, m, deterministic)
}
func (m *KeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyReq.Merge(m, src)
}
func (m *KeyReq) XXX_Size() int {
	return xxx_messageInfo_KeyReq.Size(m)
}
func (m *KeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_KeyReq proto.InternalMessageInfo

func (m *KeyReq) GetKeyFingerPrint() int32 {
	if m != nil {
		return m.KeyFingerPrint
	}
	return 0
}

func (m *KeyReq) GetKeyFamily() int32 {
	if m != nil {
		return m.KeyFamily
	}
	return 0
}

type AddrRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddrRequest) Reset()         { *m = AddrRequest{} }
func (m *AddrRequest) String() string { return proto.CompactTextString(m) }
func (*AddrRequest) ProtoMessage()    {}
func (*AddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{5}
}

func (m *AddrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddrRequest.Unmarshal(m, b)
}
func (m *AddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddrRequest.Marshal(b, m, deterministic)
}
func (m *AddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrRequest.Merge(m, src)
}
func (m *AddrRequest) XXX_Size() int {
	return xxx_messageInfo_AddrRequest.Size(m)
}
func (m *AddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddrRequest proto.InternalMessageInfo

type AddrResponse struct {
	//
	//The address encoded using a bech32 format.
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddrResponse) Reset()         { *m = AddrResponse{} }
func (m *AddrResponse) String() string { return proto.CompactTextString(m) }
func (*AddrResponse) ProtoMessage()    {}
func (*AddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{6}
}

func (m *AddrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddrResponse.Unmarshal(m, b)
}
func (m *AddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddrResponse.Marshal(b, m, deterministic)
}
func (m *AddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrResponse.Merge(m, src)
}
func (m *AddrResponse) XXX_Size() int {
	return xxx_messageInfo_AddrResponse.Size(m)
}
func (m *AddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddrResponse proto.InternalMessageInfo

func (m *AddrResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Transaction struct {
	//
	//The raw serialized transaction.
	TxHex []byte `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
	//
	//An optional label to save with the transaction. Limited to 500 characters.
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{7}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTxHex() []byte {
	if m != nil {
		return m.TxHex
	}
	return nil
}

func (m *Transaction) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type PublishResponse struct {
	//
	//If blank, then no error occurred and the transaction was successfully
	//published. If not the empty string, then a string representation of the
	//broadcast error.
	//
	//TODO(roasbeef): map to a proper enum type
	PublishError         string   `protobuf:"bytes,1,opt,name=publish_error,json=publishError,proto3" json:"publish_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{8}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetPublishError() string {
	if m != nil {
		return m.PublishError
	}
	return ""
}

type SendOutputsRequest struct {
	//
	//The number of satoshis per kilo weight that should be used when crafting
	//this transaction.
	SatPerKw int64 `protobuf:"varint,1,opt,name=sat_per_kw,json=satPerKw,proto3" json:"sat_per_kw,omitempty"`
	//
	//A slice of the outputs that should be created in the transaction produced.
	Outputs []*signrpc.TxOut `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// An optional label for the transaction, limited to 500 characters.
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendOutputsRequest) Reset()         { *m = SendOutputsRequest{} }
func (m *SendOutputsRequest) String() string { return proto.CompactTextString(m) }
func (*SendOutputsRequest) ProtoMessage()    {}
func (*SendOutputsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{9}
}

func (m *SendOutputsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendOutputsRequest.Unmarshal(m, b)
}
func (m *SendOutputsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendOutputsRequest.Marshal(b, m, deterministic)
}
func (m *SendOutputsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendOutputsRequest.Merge(m, src)
}
func (m *SendOutputsRequest) XXX_Size() int {
	return xxx_messageInfo_SendOutputsRequest.Size(m)
}
func (m *SendOutputsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendOutputsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendOutputsRequest proto.InternalMessageInfo

func (m *SendOutputsRequest) GetSatPerKw() int64 {
	if m != nil {
		return m.SatPerKw
	}
	return 0
}

func (m *SendOutputsRequest) GetOutputs() []*signrpc.TxOut {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *SendOutputsRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type SendOutputsResponse struct {
	//
	//The serialized transaction sent out on the network.
	RawTx                []byte   `protobuf:"bytes,1,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendOutputsResponse) Reset()         { *m = SendOutputsResponse{} }
func (m *SendOutputsResponse) String() string { return proto.CompactTextString(m) }
func (*SendOutputsResponse) ProtoMessage()    {}
func (*SendOutputsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{10}
}

func (m *SendOutputsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendOutputsResponse.Unmarshal(m, b)
}
func (m *SendOutputsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendOutputsResponse.Marshal(b, m, deterministic)
}
func (m *SendOutputsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendOutputsResponse.Merge(m, src)
}
func (m *SendOutputsResponse) XXX_Size() int {
	return xxx_messageInfo_SendOutputsResponse.Size(m)
}
func (m *SendOutputsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendOutputsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendOutputsResponse proto.InternalMessageInfo

func (m *SendOutputsResponse) GetRawTx() []byte {
	if m != nil {
		return m.RawTx
	}
	return nil
}

type EstimateFeeRequest struct {
	//
	//The number of confirmations to shoot for when estimating the fee.
	ConfTarget           int32    `protobuf:"varint,1,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EstimateFeeRequest) Reset()         { *m = EstimateFeeRequest{} }
func (m *EstimateFeeRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateFeeRequest) ProtoMessage()    {}
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{11}
}

func (m *EstimateFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateFeeRequest.Unmarshal(m, b)
}
func (m *EstimateFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateFeeRequest.Marshal(b, m, deterministic)
}
func (m *EstimateFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateFeeRequest.Merge(m, src)
}
func (m *EstimateFeeRequest) XXX_Size() int {
	return xxx_messageInfo_EstimateFeeRequest.Size(m)
}
func (m *EstimateFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateFeeRequest proto.InternalMessageInfo

func (m *EstimateFeeRequest) GetConfTarget() int32 {
	if m != nil {
		return m.ConfTarget
	}
	return 0
}

type EstimateFeeResponse struct {
	//
	//The amount of satoshis per kw that should be used in order to reach the
	//confirmation target in the request.
	SatPerKw             int64    `protobuf:"varint,1,opt,name=sat_per_kw,json=satPerKw,proto3" json:"sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EstimateFeeResponse) Reset()         { *m = EstimateFeeResponse{} }
func (m *EstimateFeeResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateFeeResponse) ProtoMessage()    {}
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{12}
}

func (m *EstimateFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateFeeResponse.Unmarshal(m, b)
}
func (m *EstimateFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateFeeResponse.Marshal(b, m, deterministic)
}
func (m *EstimateFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateFeeResponse.Merge(m, src)
}
func (m *EstimateFeeResponse) XXX_Size() int {
	return xxx_messageInfo_EstimateFeeResponse.Size(m)
}
func (m *EstimateFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateFeeResponse proto.InternalMessageInfo

func (m *EstimateFeeResponse) GetSatPerKw() int64 {
	if m != nil {
		return m.SatPerKw
	}
	return 0
}

type PendingSweep struct {
	// The outpoint of the output we're attempting to sweep.
	Outpoint *lnrpc.OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The witness type of the output we're attempting to sweep.
	WitnessType WitnessType `protobuf:"varint,2,opt,name=witness_type,json=witnessType,proto3,enum=walletrpc.WitnessType" json:"witness_type,omitempty"`
	// The value of the output we're attempting to sweep.
	AmountSat uint32 `protobuf:"varint,3,opt,name=amount_sat,json=amountSat,proto3" json:"amount_sat,omitempty"`
	//
	//The fee rate we'll use to sweep the output. The fee rate is only determined
	//once a sweeping transaction for the output is created, so it's possible for
	//this to be 0 before this.
	SatPerByte uint32 `protobuf:"varint,4,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
	// The number of broadcast attempts we've made to sweep the output.
	BroadcastAttempts uint32 `protobuf:"varint,5,opt,name=broadcast_attempts,json=broadcastAttempts,proto3" json:"broadcast_attempts,omitempty"`
	//
	//The next height of the chain at which we'll attempt to broadcast the
	//sweep transaction of the output.
	NextBroadcastHeight uint32 `protobuf:"varint,6,opt,name=next_broadcast_height,json=nextBroadcastHeight,proto3" json:"next_broadcast_height,omitempty"`
	// The requested confirmation target for this output.
	RequestedConfTarget uint32 `protobuf:"varint,8,opt,name=requested_conf_target,json=requestedConfTarget,proto3" json:"requested_conf_target,omitempty"`
	// The requested fee rate, expressed in sat/byte, for this output.
	RequestedSatPerByte uint32 `protobuf:"varint,9,opt,name=requested_sat_per_byte,json=requestedSatPerByte,proto3" json:"requested_sat_per_byte,omitempty"`
	//
	//Whether this input must be force-swept. This means that it is swept even
	//if it has a negative yield.
	Force                bool     `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendingSweep) Reset()         { *m = PendingSweep{} }
func (m *PendingSweep) String() string { return proto.CompactTextString(m) }
func (*PendingSweep) ProtoMessage()    {}
func (*PendingSweep) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{13}
}

func (m *PendingSweep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingSweep.Unmarshal(m, b)
}
func (m *PendingSweep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingSweep.Marshal(b, m, deterministic)
}
func (m *PendingSweep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingSweep.Merge(m, src)
}
func (m *PendingSweep) XXX_Size() int {
	return xxx_messageInfo_PendingSweep.Size(m)
}
func (m *PendingSweep) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingSweep.DiscardUnknown(m)
}

var xxx_messageInfo_PendingSweep proto.InternalMessageInfo

func (m *PendingSweep) GetOutpoint() *lnrpc.OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (m *PendingSweep) GetWitnessType() WitnessType {
	if m != nil {
		return m.WitnessType
	}
	return WitnessType_UNKNOWN_WITNESS
}

func (m *PendingSweep) GetAmountSat() uint32 {
	if m != nil {
		return m.AmountSat
	}
	return 0
}

func (m *PendingSweep) GetSatPerByte() uint32 {
	if m != nil {
		return m.SatPerByte
	}
	return 0
}

func (m *PendingSweep) GetBroadcastAttempts() uint32 {
	if m != nil {
		return m.BroadcastAttempts
	}
	return 0
}

func (m *PendingSweep) GetNextBroadcastHeight() uint32 {
	if m != nil {
		return m.NextBroadcastHeight
	}
	return 0
}

func (m *PendingSweep) GetRequestedConfTarget() uint32 {
	if m != nil {
		return m.RequestedConfTarget
	}
	return 0
}

func (m *PendingSweep) GetRequestedSatPerByte() uint32 {
	if m != nil {
		return m.RequestedSatPerByte
	}
	return 0
}

func (m *PendingSweep) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PendingSweepsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendingSweepsRequest) Reset()         { *m = PendingSweepsRequest{} }
func (m *PendingSweepsRequest) String() string { return proto.CompactTextString(m) }
func (*PendingSweepsRequest) ProtoMessage()    {}
func (*PendingSweepsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{14}
}

func (m *PendingSweepsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingSweepsRequest.Unmarshal(m, b)
}
func (m *PendingSweepsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingSweepsRequest.Marshal(b, m, deterministic)
}
func (m *PendingSweepsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingSweepsRequest.Merge(m, src)
}
func (m *PendingSweepsRequest) XXX_Size() int {
	return xxx_messageInfo_PendingSweepsRequest.Size(m)
}
func (m *PendingSweepsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingSweepsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PendingSweepsRequest proto.InternalMessageInfo

type PendingSweepsResponse struct {
	//
	//The set of outputs currently being swept by lnd's central batching engine.
	PendingSweeps        []*PendingSweep `protobuf:"bytes,1,rep,name=pending_sweeps,json=pendingSweeps,proto3" json:"pending_sweeps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PendingSweepsResponse) Reset()         { *m = PendingSweepsResponse{} }
func (m *PendingSweepsResponse) String() string { return proto.CompactTextString(m) }
func (*PendingSweepsResponse) ProtoMessage()    {}
func (*PendingSweepsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{15}
}

func (m *PendingSweepsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingSweepsResponse.Unmarshal(m, b)
}
func (m *PendingSweepsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingSweepsResponse.Marshal(b, m, deterministic)
}
func (m *PendingSweepsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingSweepsResponse.Merge(m, src)
}
func (m *PendingSweepsResponse) XXX_Size() int {
	return xxx_messageInfo_PendingSweepsResponse.Size(m)
}
func (m *PendingSweepsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingSweepsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PendingSweepsResponse proto.InternalMessageInfo

func (m *PendingSweepsResponse) GetPendingSweeps() []*PendingSweep {
	if m != nil {
		return m.PendingSweeps
	}
	return nil
}

type BumpFeeRequest struct {
	// The input we're attempting to bump the fee of.
	Outpoint *lnrpc.OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The target number of blocks that the input should be spent within.
	TargetConf uint32 `protobuf:"varint,2,opt,name=target_conf,json=targetConf,proto3" json:"target_conf,omitempty"`
	//
	//The fee rate, expressed in sat/byte, that should be used to spend the input
	//with.
	SatPerByte uint32 `protobuf:"varint,3,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
	//
	//Whether this input must be force-swept. This means that it is swept even
	//if it has a negative yield.
	Force                bool     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BumpFeeRequest) Reset()         { *m = BumpFeeRequest{} }
func (m *BumpFeeRequest) String() string { return proto.CompactTextString(m) }
func (*BumpFeeRequest) ProtoMessage()    {}
func (*BumpFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{16}
}

func (m *BumpFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BumpFeeRequest.Unmarshal(m, b)
}
func (m *BumpFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BumpFeeRequest.Marshal(b, m, deterministic)
}
func (m *BumpFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpFeeRequest.Merge(m, src)
}
func (m *BumpFeeRequest) XXX_Size() int {
	return xxx_messageInfo_BumpFeeRequest.Size(m)
}
func (m *BumpFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BumpFeeRequest proto.InternalMessageInfo

func (m *BumpFeeRequest) GetOutpoint() *lnrpc.OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (m *BumpFeeRequest) GetTargetConf() uint32 {
	if m != nil {
		return m.TargetConf
	}
	return 0
}

func (m *BumpFeeRequest) GetSatPerByte() uint32 {
	if m != nil {
		return m.SatPerByte
	}
	return 0
}

func (m *BumpFeeRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type BumpFeeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BumpFeeResponse) Reset()         { *m = BumpFeeResponse{} }
func (m *BumpFeeResponse) String() string { return proto.CompactTextString(m) }
func (*BumpFeeResponse) ProtoMessage()    {}
func (*BumpFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{17}
}

func (m *BumpFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BumpFeeResponse.Unmarshal(m, b)
}
func (m *BumpFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BumpFeeResponse.Marshal(b, m, deterministic)
}
func (m *BumpFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpFeeResponse.Merge(m, src)
}
func (m *BumpFeeResponse) XXX_Size() int {
	return xxx_messageInfo_BumpFeeResponse.Size(m)
}
func (m *BumpFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BumpFeeResponse proto.InternalMessageInfo

type ListSweepsRequest struct {
	//
	//Retrieve the full sweep transaction details. If false, only the sweep txids
	//will be returned.
	Verbose              bool     `protobuf:"varint,1,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSweepsRequest) Reset()         { *m = ListSweepsRequest{} }
func (m *ListSweepsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSweepsRequest) ProtoMessage()    {}
func (*ListSweepsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{18}
}

func (m *ListSweepsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSweepsRequest.Unmarshal(m, b)
}
func (m *ListSweepsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSweepsRequest.Marshal(b, m, deterministic)
}
func (m *ListSweepsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSweepsRequest.Merge(m, src)
}
func (m *ListSweepsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSweepsRequest.Size(m)
}
func (m *ListSweepsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSweepsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSweepsRequest proto.InternalMessageInfo

func (m *ListSweepsRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type ListSweepsResponse struct {
	// Types that are valid to be assigned to Sweeps:
	//	*ListSweepsResponse_TransactionDetails
	//	*ListSweepsResponse_TransactionIds
	Sweeps               isListSweepsResponse_Sweeps `protobuf_oneof:"sweeps"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListSweepsResponse) Reset()         { *m = ListSweepsResponse{} }
func (m *ListSweepsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSweepsResponse) ProtoMessage()    {}
func (*ListSweepsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{19}
}

func (m *ListSweepsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSweepsResponse.Unmarshal(m, b)
}
func (m *ListSweepsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSweepsResponse.Marshal(b, m, deterministic)
}
func (m *ListSweepsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSweepsResponse.Merge(m, src)
}
func (m *ListSweepsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSweepsResponse.Size(m)
}
func (m *ListSweepsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSweepsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSweepsResponse proto.InternalMessageInfo

type isListSweepsResponse_Sweeps interface {
	isListSweepsResponse_Sweeps()
}

type ListSweepsResponse_TransactionDetails struct {
	TransactionDetails *lnrpc.TransactionDetails `protobuf:"bytes,1,opt,name=transaction_details,json=transactionDetails,proto3,oneof"`
}

type ListSweepsResponse_TransactionIds struct {
	TransactionIds *ListSweepsResponse_TransactionIDs `protobuf:"bytes,2,opt,name=transaction_ids,json=transactionIds,proto3,oneof"`
}

func (*ListSweepsResponse_TransactionDetails) isListSweepsResponse_Sweeps() {}

func (*ListSweepsResponse_TransactionIds) isListSweepsResponse_Sweeps() {}

func (m *ListSweepsResponse) GetSweeps() isListSweepsResponse_Sweeps {
	if m != nil {
		return m.Sweeps
	}
	return nil
}

func (m *ListSweepsResponse) GetTransactionDetails() *lnrpc.TransactionDetails {
	if x, ok := m.GetSweeps().(*ListSweepsResponse_TransactionDetails); ok {
		return x.TransactionDetails
	}
	return nil
}

func (m *ListSweepsResponse) GetTransactionIds() *ListSweepsResponse_TransactionIDs {
	if x, ok := m.GetSweeps().(*ListSweepsResponse_TransactionIds); ok {
		return x.TransactionIds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListSweepsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListSweepsResponse_TransactionDetails)(nil),
		(*ListSweepsResponse_TransactionIds)(nil),
	}
}

type ListSweepsResponse_TransactionIDs struct {
	//
	//Reversed, hex-encoded string representing the transaction ids of the
	//sweeps that our node has broadcast. Note that these transactions may
	//not have confirmed yet, we record sweeps on broadcast, not confirmation.
	TransactionIds       []string `protobuf:"bytes,1,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSweepsResponse_TransactionIDs) Reset()         { *m = ListSweepsResponse_TransactionIDs{} }
func (m *ListSweepsResponse_TransactionIDs) String() string { return proto.CompactTextString(m) }
func (*ListSweepsResponse_TransactionIDs) ProtoMessage()    {}
func (*ListSweepsResponse_TransactionIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{19, 0}
}

func (m *ListSweepsResponse_TransactionIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSweepsResponse_TransactionIDs.Unmarshal(m, b)
}
func (m *ListSweepsResponse_TransactionIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSweepsResponse_TransactionIDs.Marshal(b, m, deterministic)
}
func (m *ListSweepsResponse_TransactionIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSweepsResponse_TransactionIDs.Merge(m, src)
}
func (m *ListSweepsResponse_TransactionIDs) XXX_Size() int {
	return xxx_messageInfo_ListSweepsResponse_TransactionIDs.Size(m)
}
func (m *ListSweepsResponse_TransactionIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSweepsResponse_TransactionIDs.DiscardUnknown(m)
}

var xxx_messageInfo_ListSweepsResponse_TransactionIDs proto.InternalMessageInfo

func (m *ListSweepsResponse_TransactionIDs) GetTransactionIds() []string {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

type LabelTransactionRequest struct {
	// The txid of the transaction to label.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// The label to add to the transaction, limited to 500 characters.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Whether to overwrite the existing label, if it is present.
	Overwrite            bool     `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelTransactionRequest) Reset()         { *m = LabelTransactionRequest{} }
func (m *LabelTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*LabelTransactionRequest) ProtoMessage()    {}
func (*LabelTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{20}
}

func (m *LabelTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelTransactionRequest.Unmarshal(m, b)
}
func (m *LabelTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelTransactionRequest.Marshal(b, m, deterministic)
}
func (m *LabelTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelTransactionRequest.Merge(m, src)
}
func (m *LabelTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_LabelTransactionRequest.Size(m)
}
func (m *LabelTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LabelTransactionRequest proto.InternalMessageInfo

func (m *LabelTransactionRequest) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *LabelTransactionRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *LabelTransactionRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

type LabelTransactionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelTransactionResponse) Reset()         { *m = LabelTransactionResponse{} }
func (m *LabelTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*LabelTransactionResponse) ProtoMessage()    {}
func (*LabelTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc6942ac78249e5, []int{21}
}

func (m *LabelTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelTransactionResponse.Unmarshal(m, b)
}
func (m *LabelTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelTransactionResponse.Marshal(b, m, deterministic)
}
func (m *LabelTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelTransactionResponse.Merge(m, src)
}
func (m *LabelTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_LabelTransactionResponse.Size(m)
}
func (m *LabelTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LabelTransactionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("walletrpc.WitnessType", WitnessType_name, WitnessType_value)
	proto.RegisterType((*LeaseOutputRequest)(nil), "walletrpc.LeaseOutputRequest")
	proto.RegisterType((*LeaseOutputResponse)(nil), "walletrpc.LeaseOutputResponse")
	proto.RegisterType((*ReleaseOutputRequest)(nil), "walletrpc.ReleaseOutputRequest")
	proto.RegisterType((*ReleaseOutputResponse)(nil), "walletrpc.ReleaseOutputResponse")
	proto.RegisterType((*KeyReq)(nil), "walletrpc.KeyReq")
	proto.RegisterType((*AddrRequest)(nil), "walletrpc.AddrRequest")
	proto.RegisterType((*AddrResponse)(nil), "walletrpc.AddrResponse")
	proto.RegisterType((*Transaction)(nil), "walletrpc.Transaction")
	proto.RegisterType((*PublishResponse)(nil), "walletrpc.PublishResponse")
	proto.RegisterType((*SendOutputsRequest)(nil), "walletrpc.SendOutputsRequest")
	proto.RegisterType((*SendOutputsResponse)(nil), "walletrpc.SendOutputsResponse")
	proto.RegisterType((*EstimateFeeRequest)(nil), "walletrpc.EstimateFeeRequest")
	proto.RegisterType((*EstimateFeeResponse)(nil), "walletrpc.EstimateFeeResponse")
	proto.RegisterType((*PendingSweep)(nil), "walletrpc.PendingSweep")
	proto.RegisterType((*PendingSweepsRequest)(nil), "walletrpc.PendingSweepsRequest")
	proto.RegisterType((*PendingSweepsResponse)(nil), "walletrpc.PendingSweepsResponse")
	proto.RegisterType((*BumpFeeRequest)(nil), "walletrpc.BumpFeeRequest")
	proto.RegisterType((*BumpFeeResponse)(nil), "walletrpc.BumpFeeResponse")
	proto.RegisterType((*ListSweepsRequest)(nil), "walletrpc.ListSweepsRequest")
	proto.RegisterType((*ListSweepsResponse)(nil), "walletrpc.ListSweepsResponse")
	proto.RegisterType((*ListSweepsResponse_TransactionIDs)(nil), "walletrpc.ListSweepsResponse.TransactionIDs")
	proto.RegisterType((*LabelTransactionRequest)(nil), "walletrpc.LabelTransactionRequest")
	proto.RegisterType((*LabelTransactionResponse)(nil), "walletrpc.LabelTransactionResponse")
}

func init() { proto.RegisterFile("walletrpc/walletkit.proto", fileDescriptor_6cc6942ac78249e5) }

var fileDescriptor_6cc6942ac78249e5 = []byte{
	// 1358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6f, 0x1a, 0xc7,
	0x13, 0x0f, 0xc6, 0x60, 0x18, 0x7e, 0x18, 0x2f, 0xd8, 0x26, 0xc4, 0x89, 0xf9, 0x5e, 0xf4, 0x6d,
	0xad, 0x36, 0xc1, 0xaa, 0xa3, 0x54, 0x4d, 0x2a, 0x55, 0xb5, 0xe1, 0x2c, 0x2c, 0x30, 0x38, 0x77,
	0x97, 0x58, 0x69, 0x1f, 0x4e, 0x07, 0xb7, 0xc1, 0x27, 0xe3, 0xbb, 0xcb, 0xde, 0x12, 0xe0, 0xad,
	0x0f, 0xfd, 0x1b, 0x2a, 0xe5, 0xbf, 0xad, 0x76, 0xef, 0x07, 0x7b, 0x80, 0x5d, 0x55, 0xea, 0x93,
	0x6f, 0x3f, 0x33, 0xf3, 0x99, 0xd9, 0x99, 0x61, 0x76, 0x0c, 0x8f, 0xa7, 0xc6, 0x78, 0x8c, 0x29,
	0x71, 0x87, 0xc7, 0xfe, 0xd7, 0xad, 0x45, 0x1b, 0x2e, 0x71, 0xa8, 0x83, 0xb2, 0x91, 0xa8, 0x96,
	0x25, 0xee, 0xd0, 0x47, 0x6b, 0x15, 0xcf, 0x1a, 0xd9, 0x4c, 0x9d, 0xfd, 0xc5, 0xc4, 0x47, 0xa5,
	0x77, 0x80, 0xba, 0xd8, 0xf0, 0x70, 0x7f, 0x42, 0xdd, 0x09, 0x55, 0xf0, 0xe7, 0x09, 0xf6, 0x28,
	0x2a, 0xc2, 0x86, 0x65, 0x56, 0x13, 0xf5, 0xc4, 0x51, 0x5e, 0xd9, 0xb0, 0x4c, 0xf4, 0x3d, 0x64,
	0x9c, 0x09, 0x75, 0x1d, 0xcb, 0xa6, 0xd5, 0x8d, 0x7a, 0xe2, 0x28, 0x77, 0xb2, 0xdd, 0x18, 0x33,
	0xb2, 0x46, 0x7f, 0x42, 0xaf, 0x18, 0xac, 0x44, 0x0a, 0xd2, 0x6b, 0x28, 0xc7, 0x28, 0x3d, 0xd7,
	0xb1, 0x3d, 0x8c, 0x9e, 0x01, 0xe0, 0x99, 0x6b, 0x11, 0x83, 0x5a, 0x8e, 0xcd, 0xb9, 0x37, 0x15,
	0x01, 0x91, 0x54, 0xa8, 0x28, 0x78, 0xfc, 0x1f, 0xc7, 0xb2, 0x0f, 0xbb, 0x4b, 0xa4, 0x7e, 0x34,
	0xd2, 0x3b, 0x48, 0x77, 0xf0, 0x5c, 0xc1, 0x9f, 0xd1, 0x11, 0x94, 0x6e, 0xf1, 0x5c, 0xff, 0x64,
	0xd9, 0x23, 0x4c, 0x74, 0x97, 0x30, 0x5e, 0xe6, 0x2d, 0xa5, 0x14, 0x6f, 0xf1, 0xfc, 0x9c, 0xc3,
	0x57, 0x0c, 0x45, 0x4f, 0x01, 0xb8, 0xa6, 0x71, 0x67, 0x8d, 0xe7, 0xdc, 0x77, 0x4a, 0xc9, 0x32,
	0x1d, 0x0e, 0x48, 0x05, 0xc8, 0x9d, 0x9a, 0x26, 0x09, 0xe2, 0x96, 0x24, 0xc8, 0xfb, 0xc7, 0xe0,
	0xfe, 0x08, 0x36, 0x0d, 0xd3, 0x24, 0x9c, 0x3b, 0xab, 0xf0, 0x6f, 0xe9, 0x2d, 0xe4, 0x34, 0x62,
	0xd8, 0x9e, 0x31, 0x64, 0x29, 0x40, 0xbb, 0x90, 0xa6, 0x33, 0xfd, 0x06, 0xcf, 0x82, 0xeb, 0xa6,
	0xe8, 0xac, 0x8d, 0x67, 0xa8, 0x02, 0xa9, 0xb1, 0x31, 0xc0, 0x63, 0xee, 0x32, 0xab, 0xf8, 0x07,
	0xe9, 0x47, 0xd8, 0xbe, 0x9a, 0x0c, 0xc6, 0x96, 0x77, 0x13, 0xb9, 0x78, 0x0e, 0x05, 0xd7, 0x87,
	0x74, 0x4c, 0x88, 0x13, 0xfa, 0xca, 0x07, 0xa0, 0xcc, 0x30, 0x89, 0x00, 0x52, 0xb1, 0x6d, 0xfa,
	0xf9, 0xf0, 0xc2, 0x2c, 0x1f, 0x00, 0x78, 0x06, 0xd5, 0x5d, 0x4c, 0xf4, 0xdb, 0x29, 0xb7, 0x4b,
	0x2a, 0x19, 0xcf, 0xa0, 0x57, 0x98, 0x74, 0xa6, 0xe8, 0x08, 0xb6, 0x1c, 0x5f, 0xbf, 0xba, 0x51,
	0x4f, 0x1e, 0xe5, 0x4e, 0x8a, 0x8d, 0xa0, 0x9b, 0x1a, 0xda, 0xac, 0x3f, 0xa1, 0x4a, 0x28, 0x5e,
	0xc4, 0x9a, 0x14, 0x63, 0x7d, 0x01, 0xe5, 0x98, 0xcf, 0x20, 0xde, 0x5d, 0x48, 0x13, 0x63, 0xaa,
	0xd3, 0xe8, 0xbe, 0xc4, 0x98, 0x6a, 0x33, 0xe9, 0x35, 0x20, 0xd9, 0xa3, 0xd6, 0x9d, 0x41, 0xf1,
	0x39, 0xc6, 0x61, 0x84, 0x87, 0x90, 0x1b, 0x3a, 0xf6, 0x27, 0x9d, 0x1a, 0x64, 0x84, 0xc3, 0x12,
	0x01, 0x83, 0x34, 0x8e, 0x48, 0xaf, 0xa0, 0x1c, 0x33, 0x0b, 0x9c, 0x3c, 0x78, 0x33, 0xe9, 0x6b,
	0x12, 0xf2, 0x57, 0xd8, 0x36, 0x2d, 0x7b, 0xa4, 0x4e, 0x31, 0x76, 0x63, 0xed, 0x95, 0xf8, 0x87,
	0xf6, 0x42, 0x6f, 0x20, 0x3f, 0xb5, 0xa8, 0x8d, 0x3d, 0x4f, 0xa7, 0x73, 0x17, 0xf3, 0x02, 0x15,
	0x4f, 0xf6, 0x1a, 0xd1, 0x0f, 0xb0, 0x71, 0xed, 0x8b, 0xb5, 0xb9, 0x8b, 0x95, 0xdc, 0x74, 0x71,
	0x60, 0xcd, 0x64, 0xdc, 0x39, 0x13, 0x9b, 0xea, 0x9e, 0x41, 0x79, 0xb6, 0x0a, 0x4a, 0xd6, 0x47,
	0x54, 0x83, 0xa2, 0x3a, 0xe4, 0xc3, 0xa8, 0x07, 0x73, 0x8a, 0xab, 0x9b, 0x5c, 0x01, 0xfc, 0xb8,
	0xcf, 0xe6, 0x14, 0xa3, 0x97, 0x80, 0x06, 0xc4, 0x31, 0xcc, 0xa1, 0xe1, 0x51, 0xdd, 0xa0, 0x14,
	0xdf, 0xb9, 0xd4, 0xab, 0xa6, 0xb8, 0xde, 0x4e, 0x24, 0x39, 0x0d, 0x04, 0xe8, 0x04, 0x76, 0x6d,
	0x3c, 0xa3, 0xfa, 0xc2, 0xe6, 0x06, 0x5b, 0xa3, 0x1b, 0x5a, 0x4d, 0x73, 0x8b, 0x32, 0x13, 0x9e,
	0x85, 0xb2, 0x36, 0x17, 0x31, 0x1b, 0xe2, 0x67, 0x1f, 0x9b, 0xba, 0x98, 0xfc, 0x8c, 0x6f, 0x13,
	0x09, 0x9b, 0x51, 0x15, 0xd0, 0x2b, 0xd8, 0x5b, 0xd8, 0xc4, 0xae, 0x90, 0x5d, 0x32, 0x52, 0x17,
	0x77, 0xa9, 0x40, 0xea, 0x93, 0x43, 0x86, 0xb8, 0xba, 0x55, 0x4f, 0x1c, 0x65, 0x14, 0xff, 0x20,
	0xed, 0x41, 0x45, 0x2c, 0x4d, 0xd8, 0xab, 0xd2, 0x35, 0xec, 0x2e, 0xe1, 0x41, 0xa9, 0x7f, 0x81,
	0xa2, 0xeb, 0x0b, 0x74, 0x8f, 0x4b, 0xaa, 0x09, 0xde, 0xad, 0xfb, 0x42, 0x41, 0x44, 0x4b, 0xa5,
	0xe0, 0x8a, 0x3c, 0xd2, 0x5f, 0x09, 0x28, 0x9e, 0x4d, 0xee, 0x5c, 0xa1, 0xeb, 0xfe, 0x55, 0x3b,
	0x1c, 0x42, 0xce, 0x4f, 0x10, 0x4f, 0x16, 0xef, 0x86, 0x82, 0x02, 0x3e, 0xc4, 0x52, 0xb4, 0x52,
	0xd5, 0xe4, 0x4a, 0x55, 0xa3, 0x4c, 0x6c, 0x8a, 0x99, 0xd8, 0x81, 0xed, 0x28, 0xae, 0x60, 0x80,
	0xbd, 0x84, 0x9d, 0xae, 0xe5, 0xd1, 0x58, 0x66, 0x50, 0x15, 0xb6, 0xbe, 0x60, 0x32, 0x70, 0x3c,
	0xcc, 0x83, 0xcd, 0x28, 0xe1, 0x51, 0xfa, 0x63, 0x03, 0x90, 0xa8, 0x1f, 0x64, 0xac, 0x0b, 0x65,
	0xba, 0x18, 0x40, 0xba, 0x89, 0xa9, 0x61, 0x8d, 0xbd, 0xe0, 0xa6, 0x8f, 0x83, 0x9b, 0x0a, 0x23,
	0xaa, 0xe5, 0x2b, 0xb4, 0x1f, 0x29, 0x88, 0xae, 0xa0, 0xe8, 0x1a, 0xb6, 0x45, 0x36, 0xcb, 0xf4,
	0x82, 0x09, 0xfd, 0x42, 0x28, 0xc0, 0x6a, 0x14, 0xa2, 0x83, 0x8b, 0x16, 0x23, 0x2f, 0x0a, 0x34,
	0x17, 0xa6, 0x57, 0x7b, 0x03, 0xc5, 0xb8, 0x0e, 0xfa, 0x76, 0xd5, 0x15, 0xab, 0x75, 0x76, 0xd9,
	0xf4, 0x2c, 0x03, 0x69, 0xbf, 0x17, 0x24, 0x03, 0xf6, 0xbb, 0x6c, 0x1a, 0x09, 0x4c, 0x61, 0xde,
	0x10, 0x6c, 0xd2, 0x59, 0xf4, 0xca, 0xf0, 0xef, 0xf5, 0x53, 0x17, 0x1d, 0x40, 0xd6, 0xf9, 0x82,
	0xc9, 0x94, 0x58, 0x41, 0xf9, 0x32, 0xca, 0x02, 0x90, 0x6a, 0x50, 0x5d, 0x75, 0xe1, 0x5f, 0xf2,
	0xbb, 0xaf, 0x49, 0xc8, 0x09, 0xd3, 0x00, 0x95, 0x61, 0xfb, 0x7d, 0xaf, 0xd3, 0xeb, 0x5f, 0xf7,
	0xf4, 0xeb, 0x0b, 0xad, 0x27, 0xab, 0x6a, 0xe9, 0x11, 0xaa, 0x42, 0xa5, 0xd9, 0xbf, 0xbc, 0xbc,
	0xd0, 0x2e, 0xe5, 0x9e, 0xa6, 0x6b, 0x17, 0x97, 0xb2, 0xde, 0xed, 0x37, 0x3b, 0xa5, 0x04, 0xda,
	0x87, 0xb2, 0x20, 0xe9, 0xf5, 0xf5, 0x96, 0xdc, 0x3d, 0xfd, 0x58, 0xda, 0x40, 0xbb, 0xb0, 0x23,
	0x08, 0x14, 0xf9, 0x43, 0xbf, 0x23, 0x97, 0x92, 0x4c, 0xbf, 0xad, 0x75, 0x9b, 0x7a, 0xff, 0xfc,
	0x5c, 0x56, 0xe4, 0x56, 0x28, 0xd8, 0x64, 0x2e, 0xb8, 0xe0, 0xb4, 0xd9, 0x94, 0xaf, 0xb4, 0x85,
	0x24, 0x85, 0xfe, 0x0f, 0xff, 0x8b, 0x99, 0x30, 0xf7, 0xfd, 0xf7, 0x9a, 0xae, 0xca, 0xcd, 0x7e,
	0xaf, 0xa5, 0x77, 0xe5, 0x0f, 0x72, 0xb7, 0x94, 0x46, 0xdf, 0x80, 0x14, 0x27, 0x50, 0xdf, 0x37,
	0x9b, 0xb2, 0xaa, 0xc6, 0xf5, 0xb6, 0xd0, 0x21, 0x3c, 0x59, 0x8a, 0xe0, 0xb2, 0xaf, 0xc9, 0x21,
	0x6b, 0x29, 0x83, 0xea, 0x70, 0xb0, 0x1c, 0x09, 0xd7, 0x08, 0xf8, 0x4a, 0x59, 0x74, 0x00, 0x55,
	0xae, 0x21, 0x32, 0x87, 0xf1, 0x02, 0xaa, 0x40, 0x29, 0xc8, 0x9c, 0xde, 0x91, 0x3f, 0xea, 0xed,
	0x53, 0xb5, 0x5d, 0xca, 0xa1, 0x27, 0xb0, 0xdf, 0x93, 0x55, 0x46, 0xb7, 0x22, 0xcc, 0x2f, 0x25,
	0xeb, 0xb4, 0xd7, 0x6c, 0xf7, 0x95, 0x52, 0xe1, 0xe4, 0xcf, 0x2d, 0xc8, 0x5e, 0xf3, 0x0e, 0xed,
	0x58, 0x14, 0x75, 0x21, 0x27, 0x2c, 0x30, 0xe8, 0xa9, 0xd8, 0xbc, 0x2b, 0xfb, 0x49, 0xed, 0xd9,
	0x7d, 0xe2, 0xe0, 0x27, 0xa6, 0x40, 0x21, 0xb6, 0x82, 0xa0, 0x43, 0xc1, 0x60, 0xdd, 0xc6, 0x53,
	0xab, 0xdf, 0xaf, 0x10, 0x70, 0xbe, 0x85, 0x42, 0x0b, 0x13, 0xeb, 0x0b, 0xee, 0xe1, 0x19, 0xed,
	0xe0, 0x39, 0xda, 0x11, 0x4c, 0xfc, 0xbd, 0xa6, 0xb6, 0x17, 0x3d, 0xd1, 0x1d, 0x3c, 0x6f, 0x61,
	0x6f, 0x48, 0x2c, 0x97, 0x3a, 0x04, 0xfd, 0x04, 0x59, 0xdf, 0x96, 0xd9, 0x95, 0x45, 0xa5, 0xae,
	0x33, 0x34, 0xa8, 0x43, 0xee, 0xb5, 0xfc, 0x19, 0x32, 0xcc, 0x1f, 0xdb, 0x6a, 0x90, 0xf8, 0xc6,
	0x09, 0x5b, 0x4f, 0x6d, 0x7f, 0x05, 0x0f, 0x42, 0x6e, 0x03, 0x0a, 0xd6, 0x15, 0x71, 0xe3, 0x11,
	0x69, 0x04, 0xbc, 0x56, 0x13, 0x27, 0xf6, 0xd2, 0x96, 0xd3, 0x85, 0x9c, 0xb0, 0x4c, 0xc4, 0xca,
	0xb3, 0xba, 0xd8, 0xc4, 0xca, 0xb3, 0x6e, 0x07, 0xe9, 0x42, 0x4e, 0xd8, 0x1a, 0x62, 0x6c, 0xab,
	0x4b, 0x48, 0x8c, 0x6d, 0xdd, 0xb2, 0xa1, 0x40, 0x21, 0xf6, 0x34, 0xc5, 0x8a, 0xbd, 0xee, 0x31,
	0x8b, 0x15, 0x7b, 0xfd, 0xab, 0xf6, 0x2b, 0x6c, 0x05, 0xc3, 0x1f, 0x3d, 0x16, 0x94, 0xe3, 0x0f,
	0x55, 0x2c, 0x63, 0x4b, 0x6f, 0x05, 0xba, 0x00, 0x58, 0x4c, 0x5d, 0x74, 0x70, 0xcf, 0x30, 0xf6,
	0x79, 0x9e, 0x3e, 0x38, 0xaa, 0xd1, 0xef, 0x50, 0x5a, 0x9e, 0x70, 0x48, 0x12, 0x4d, 0xd6, 0x4f,
	0xd8, 0xda, 0xf3, 0x07, 0x75, 0x7c, 0xf2, 0xb3, 0x1f, 0x7e, 0x3b, 0x1e, 0x59, 0xf4, 0x66, 0x32,
	0x68, 0x0c, 0x9d, 0xbb, 0xe3, 0x31, 0xdb, 0x41, 0x6c, 0xcb, 0x1e, 0xd9, 0x98, 0x4e, 0x1d, 0x72,
	0x7b, 0x3c, 0xb6, 0xcd, 0x63, 0xfe, 0x22, 0x1d, 0x47, 0x5c, 0x83, 0x34, 0xff, 0x37, 0xe6, 0xd5,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x15, 0x92, 0x8b, 0x0f, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletKitClient is the client API for WalletKit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletKitClient interface {
	//
	//LeaseOutput locks an output to the given ID, preventing it from being
	//available for any future coin selection attempts. The absolute time of the
	//lock's expiration is returned. The expiration of the lock can be extended by
	//successive invocations of this RPC. Outputs can be unlocked before their
	//expiration through `ReleaseOutput`.
	LeaseOutput(ctx context.Context, in *LeaseOutputRequest, opts ...grpc.CallOption) (*LeaseOutputResponse, error)
	//
	//ReleaseOutput unlocks an output, allowing it to be available for coin
	//selection if it remains unspent. The ID should match the one used to
	//originally lock the output.
	ReleaseOutput(ctx context.Context, in *ReleaseOutputRequest, opts ...grpc.CallOption) (*ReleaseOutputResponse, error)
	//
	//DeriveNextKey attempts to derive the *next* key within the key family
	//(account in BIP43) specified. This method should return the next external
	//child within this branch.
	DeriveNextKey(ctx context.Context, in *KeyReq, opts ...grpc.CallOption) (*signrpc.KeyDescriptor, error)
	//
	//DeriveKey attempts to derive an arbitrary key specified by the passed
	//KeyLocator.
	DeriveKey(ctx context.Context, in *signrpc.KeyLocator, opts ...grpc.CallOption) (*signrpc.KeyDescriptor, error)
	//
	//NextAddr returns the next unused address within the wallet.
	NextAddr(ctx context.Context, in *AddrRequest, opts ...grpc.CallOption) (*AddrResponse, error)
	//
	//PublishTransaction attempts to publish the passed transaction to the
	//network. Once this returns without an error, the wallet will continually
	//attempt to re-broadcast the transaction on start up, until it enters the
	//chain.
	PublishTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*PublishResponse, error)
	//
	//SendOutputs is similar to the existing sendmany call in Bitcoind, and
	//allows the caller to create a transaction that sends to several outputs at
	//once. This is ideal when wanting to batch create a set of transactions.
	SendOutputs(ctx context.Context, in *SendOutputsRequest, opts ...grpc.CallOption) (*SendOutputsResponse, error)
	//
	//EstimateFee attempts to query the internal fee estimator of the wallet to
	//determine the fee (in sat/kw) to attach to a transaction in order to
	//achieve the confirmation target.
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	//
	//PendingSweeps returns lists of on-chain outputs that lnd is currently
	//attempting to sweep within its central batching engine. Outputs with similar
	//fee rates are batched together in order to sweep them within a single
	//transaction.
	//
	//NOTE: Some of the fields within PendingSweepsRequest are not guaranteed to
	//remain supported. This is an advanced API that depends on the internals of
	//the UtxoSweeper, so things may change.
	PendingSweeps(ctx context.Context, in *PendingSweepsRequest, opts ...grpc.CallOption) (*PendingSweepsResponse, error)
	//
	//BumpFee bumps the fee of an arbitrary input within a transaction. This RPC
	//takes a different approach than bitcoind's bumpfee command. lnd has a
	//central batching engine in which inputs with similar fee rates are batched
	//together to save on transaction fees. Due to this, we cannot rely on
	//bumping the fee on a specific transaction, since transactions can change at
	//any point with the addition of new inputs. The list of inputs that
	//currently exist within lnd's central batching engine can be retrieved
	//through the PendingSweeps RPC.
	//
	//When bumping the fee of an input that currently exists within lnd's central
	//batching engine, a higher fee transaction will be created that replaces the
	//lower fee transaction through the Replace-By-Fee (RBF) policy. If it
	//
	//This RPC also serves useful when wanting to perform a Child-Pays-For-Parent
	//(CPFP), where the child transaction pays for its parent's fee. This can be
	//done by specifying an outpoint within the low fee transaction that is under
	//the control of the wallet.
	//
	//The fee preference can be expressed either as a specific fee rate or a delta
	//of blocks in which the output should be swept on-chain within. If a fee
	//preference is not explicitly specified, then an error is returned.
	//
	//Note that this RPC currently doesn't perform any validation checks on the
	//fee preference being provided. For now, the responsibility of ensuring that
	//the new fee preference is sufficient is delegated to the user.
	BumpFee(ctx context.Context, in *BumpFeeRequest, opts ...grpc.CallOption) (*BumpFeeResponse, error)
	//
	//ListSweeps returns a list of the sweep transactions our node has produced.
	//Note that these sweeps may not be confirmed yet, as we record sweeps on
	//broadcast, not confirmation.
	ListSweeps(ctx context.Context, in *ListSweepsRequest, opts ...grpc.CallOption) (*ListSweepsResponse, error)
	//
	//LabelTransaction adds a label to a transaction. If the transaction already
	//has a label the call will fail unless the overwrite bool is set. This will
	//overwrite the exiting transaction label. Labels must not be empty, and
	//cannot exceed 500 characters.
	LabelTransaction(ctx context.Context, in *LabelTransactionRequest, opts ...grpc.CallOption) (*LabelTransactionResponse, error)
}

type walletKitClient struct {
	cc *grpc.ClientConn
}

func NewWalletKitClient(cc *grpc.ClientConn) WalletKitClient {
	return &walletKitClient{cc}
}

func (c *walletKitClient) LeaseOutput(ctx context.Context, in *LeaseOutputRequest, opts ...grpc.CallOption) (*LeaseOutputResponse, error) {
	out := new(LeaseOutputResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/LeaseOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) ReleaseOutput(ctx context.Context, in *ReleaseOutputRequest, opts ...grpc.CallOption) (*ReleaseOutputResponse, error) {
	out := new(ReleaseOutputResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/ReleaseOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) DeriveNextKey(ctx context.Context, in *KeyReq, opts ...grpc.CallOption) (*signrpc.KeyDescriptor, error) {
	out := new(signrpc.KeyDescriptor)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/DeriveNextKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) DeriveKey(ctx context.Context, in *signrpc.KeyLocator, opts ...grpc.CallOption) (*signrpc.KeyDescriptor, error) {
	out := new(signrpc.KeyDescriptor)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/DeriveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) NextAddr(ctx context.Context, in *AddrRequest, opts ...grpc.CallOption) (*AddrResponse, error) {
	out := new(AddrResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/NextAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) PublishTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/PublishTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) SendOutputs(ctx context.Context, in *SendOutputsRequest, opts ...grpc.CallOption) (*SendOutputsResponse, error) {
	out := new(SendOutputsResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/SendOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) PendingSweeps(ctx context.Context, in *PendingSweepsRequest, opts ...grpc.CallOption) (*PendingSweepsResponse, error) {
	out := new(PendingSweepsResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/PendingSweeps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) BumpFee(ctx context.Context, in *BumpFeeRequest, opts ...grpc.CallOption) (*BumpFeeResponse, error) {
	out := new(BumpFeeResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/BumpFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) ListSweeps(ctx context.Context, in *ListSweepsRequest, opts ...grpc.CallOption) (*ListSweepsResponse, error) {
	out := new(ListSweepsResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/ListSweeps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletKitClient) LabelTransaction(ctx context.Context, in *LabelTransactionRequest, opts ...grpc.CallOption) (*LabelTransactionResponse, error) {
	out := new(LabelTransactionResponse)
	err := c.cc.Invoke(ctx, "/walletrpc.WalletKit/LabelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletKitServer is the server API for WalletKit service.
type WalletKitServer interface {
	//
	//LeaseOutput locks an output to the given ID, preventing it from being
	//available for any future coin selection attempts. The absolute time of the
	//lock's expiration is returned. The expiration of the lock can be extended by
	//successive invocations of this RPC. Outputs can be unlocked before their
	//expiration through `ReleaseOutput`.
	LeaseOutput(context.Context, *LeaseOutputRequest) (*LeaseOutputResponse, error)
	//
	//ReleaseOutput unlocks an output, allowing it to be available for coin
	//selection if it remains unspent. The ID should match the one used to
	//originally lock the output.
	ReleaseOutput(context.Context, *ReleaseOutputRequest) (*ReleaseOutputResponse, error)
	//
	//DeriveNextKey attempts to derive the *next* key within the key family
	//(account in BIP43) specified. This method should return the next external
	//child within this branch.
	DeriveNextKey(context.Context, *KeyReq) (*signrpc.KeyDescriptor, error)
	//
	//DeriveKey attempts to derive an arbitrary key specified by the passed
	//KeyLocator.
	DeriveKey(context.Context, *signrpc.KeyLocator) (*signrpc.KeyDescriptor, error)
	//
	//NextAddr returns the next unused address within the wallet.
	NextAddr(context.Context, *AddrRequest) (*AddrResponse, error)
	//
	//PublishTransaction attempts to publish the passed transaction to the
	//network. Once this returns without an error, the wallet will continually
	//attempt to re-broadcast the transaction on start up, until it enters the
	//chain.
	PublishTransaction(context.Context, *Transaction) (*PublishResponse, error)
	//
	//SendOutputs is similar to the existing sendmany call in Bitcoind, and
	//allows the caller to create a transaction that sends to several outputs at
	//once. This is ideal when wanting to batch create a set of transactions.
	SendOutputs(context.Context, *SendOutputsRequest) (*SendOutputsResponse, error)
	//
	//EstimateFee attempts to query the internal fee estimator of the wallet to
	//determine the fee (in sat/kw) to attach to a transaction in order to
	//achieve the confirmation target.
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	//
	//PendingSweeps returns lists of on-chain outputs that lnd is currently
	//attempting to sweep within its central batching engine. Outputs with similar
	//fee rates are batched together in order to sweep them within a single
	//transaction.
	//
	//NOTE: Some of the fields within PendingSweepsRequest are not guaranteed to
	//remain supported. This is an advanced API that depends on the internals of
	//the UtxoSweeper, so things may change.
	PendingSweeps(context.Context, *PendingSweepsRequest) (*PendingSweepsResponse, error)
	//
	//BumpFee bumps the fee of an arbitrary input within a transaction. This RPC
	//takes a different approach than bitcoind's bumpfee command. lnd has a
	//central batching engine in which inputs with similar fee rates are batched
	//together to save on transaction fees. Due to this, we cannot rely on
	//bumping the fee on a specific transaction, since transactions can change at
	//any point with the addition of new inputs. The list of inputs that
	//currently exist within lnd's central batching engine can be retrieved
	//through the PendingSweeps RPC.
	//
	//When bumping the fee of an input that currently exists within lnd's central
	//batching engine, a higher fee transaction will be created that replaces the
	//lower fee transaction through the Replace-By-Fee (RBF) policy. If it
	//
	//This RPC also serves useful when wanting to perform a Child-Pays-For-Parent
	//(CPFP), where the child transaction pays for its parent's fee. This can be
	//done by specifying an outpoint within the low fee transaction that is under
	//the control of the wallet.
	//
	//The fee preference can be expressed either as a specific fee rate or a delta
	//of blocks in which the output should be swept on-chain within. If a fee
	//preference is not explicitly specified, then an error is returned.
	//
	//Note that this RPC currently doesn't perform any validation checks on the
	//fee preference being provided. For now, the responsibility of ensuring that
	//the new fee preference is sufficient is delegated to the user.
	BumpFee(context.Context, *BumpFeeRequest) (*BumpFeeResponse, error)
	//
	//ListSweeps returns a list of the sweep transactions our node has produced.
	//Note that these sweeps may not be confirmed yet, as we record sweeps on
	//broadcast, not confirmation.
	ListSweeps(context.Context, *ListSweepsRequest) (*ListSweepsResponse, error)
	//
	//LabelTransaction adds a label to a transaction. If the transaction already
	//has a label the call will fail unless the overwrite bool is set. This will
	//overwrite the exiting transaction label. Labels must not be empty, and
	//cannot exceed 500 characters.
	LabelTransaction(context.Context, *LabelTransactionRequest) (*LabelTransactionResponse, error)
}

func RegisterWalletKitServer(s *grpc.Server, srv WalletKitServer) {
	s.RegisterService(&_WalletKit_serviceDesc, srv)
}

func _WalletKit_LeaseOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).LeaseOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/LeaseOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).LeaseOutput(ctx, req.(*LeaseOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_ReleaseOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).ReleaseOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/ReleaseOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).ReleaseOutput(ctx, req.(*ReleaseOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_DeriveNextKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).DeriveNextKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/DeriveNextKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).DeriveNextKey(ctx, req.(*KeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_DeriveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(signrpc.KeyLocator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).DeriveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/DeriveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).DeriveKey(ctx, req.(*signrpc.KeyLocator))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_NextAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).NextAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/NextAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).NextAddr(ctx, req.(*AddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_PublishTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).PublishTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/PublishTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).PublishTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_SendOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).SendOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/SendOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).SendOutputs(ctx, req.(*SendOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_PendingSweeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingSweepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).PendingSweeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/PendingSweeps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).PendingSweeps(ctx, req.(*PendingSweepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_BumpFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).BumpFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/BumpFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).BumpFee(ctx, req.(*BumpFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_ListSweeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSweepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).ListSweeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/ListSweeps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).ListSweeps(ctx, req.(*ListSweepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletKit_LabelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletKitServer).LabelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletKit/LabelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletKitServer).LabelTransaction(ctx, req.(*LabelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletKit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.WalletKit",
	HandlerType: (*WalletKitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaseOutput",
			Handler:    _WalletKit_LeaseOutput_Handler,
		},
		{
			MethodName: "ReleaseOutput",
			Handler:    _WalletKit_ReleaseOutput_Handler,
		},
		{
			MethodName: "DeriveNextKey",
			Handler:    _WalletKit_DeriveNextKey_Handler,
		},
		{
			MethodName: "DeriveKey",
			Handler:    _WalletKit_DeriveKey_Handler,
		},
		{
			MethodName: "NextAddr",
			Handler:    _WalletKit_NextAddr_Handler,
		},
		{
			MethodName: "PublishTransaction",
			Handler:    _WalletKit_PublishTransaction_Handler,
		},
		{
			MethodName: "SendOutputs",
			Handler:    _WalletKit_SendOutputs_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _WalletKit_EstimateFee_Handler,
		},
		{
			MethodName: "PendingSweeps",
			Handler:    _WalletKit_PendingSweeps_Handler,
		},
		{
			MethodName: "BumpFee",
			Handler:    _WalletKit_BumpFee_Handler,
		},
		{
			MethodName: "ListSweeps",
			Handler:    _WalletKit_ListSweeps_Handler,
		},
		{
			MethodName: "LabelTransaction",
			Handler:    _WalletKit_LabelTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "walletrpc/walletkit.proto",
}
